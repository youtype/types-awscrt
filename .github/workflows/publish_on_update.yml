name: Update stubs
concurrency: update_stubs

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch: {}

jobs:
  check-version:
    name: Check awscrt version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vars.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Extract versions
        id: vars
        uses: actions/github-script@v6
        with:
          script: |
            const { getLatestVersion, isVersionGreater } = require('./.github/workflows/helpers.js')
            core.setOutput('version', '')

            const libVersion = await getLatestVersion('awscrt')
            core.info(`awscrt version = ${libVersion}`)

            const stubsVersion = await getLatestVersion('types-awscrt')
            core.info(`types-awscrt version = ${stubsVersion}`)

            if (isVersionGreater(libVersion, stubsVersion)) {
                core.info(`New version found: ${libVersion}`)
                core.setOutput('version', libVersion)
            }

  publish-stubs:
    name: Publish types-awscrt
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.version
    env:
      VERSION: ${{ needs.check-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install poetry pip
          poetry config virtualenvs.create false
          poetry install -n
      - name: Install awscrt
        run: |
          poetry run pip install awscrt==${VERSION}
      - name: Stubs consistency check
        run: |
          poetry run istub
      - name: Bump version
        run: |
          echo "Bumping version to ${VERSION}"
          poetry version ${VERSION}
          rm -rf *.egg-info || true
          poetry install -n
      - name: Commit changes
        env:
          VERSION: ${{ steps.version.outputs.result }}
        run: |
          git config --global user.email "github-actions"
          git config --global user.name "github-actions@github.com"
          git add pyproject.toml
          git commit -m "Release ${VERSION}" || true
          git push || true
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          poetry build
          poetry run twine upload  --non-interactive dist/*
